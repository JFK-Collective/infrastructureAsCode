name: Terraform CD (Deploy Many)

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy-dev:
    name: Deploy to DEV
    runs-on: ubuntu-latest
    environment: dev
    env:
      WORKDIR: "OVING2/terraform"
      BACKEND_HCL: "../shared/backend.hcl"
      TF_INPUT: "false"
      TF_IN_AUTOMATION: "true"
      ENVIRONMENT: "dev"
      KEYVAULT_NAME: "kv-tfstate-jfk"

    steps:
      - name: Download Terraform Artifact from Release
        uses: robinraju/release-downloader@v1.11
        with:
          repository: ${{ github.repository }}
          latest: true
          fileName: "terraform-*.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Terraform Artifact
        run: tar -xzf terraform-*.tar.gz

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
          terraform_wrapper: false

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM_* for Terraform (OIDC)
        run: |
          {
            echo "ARM_USE_OIDC=true"
            echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"
            echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          } >> "$GITHUB_ENV"

      # âœ… Fetch Base64-encoded tfvars and decode
      - name: Fetch tfvars from Azure Key Vault (Base64 decode)
        run: |
          echo "Fetching Base64 tfvars for DEV..."
          mkdir -p "${{ env.WORKDIR }}"
          SECRET_B64=$(az keyvault secret show \
            --vault-name ${{ env.KEYVAULT_NAME }} \
            --name "dev-tfvars-oblig2" \
            --query value -o tsv)
          echo "$SECRET_B64" | base64 -d > "${{ env.WORKDIR }}/dev.tfvars"
          echo "âœ… Decoded and saved dev.tfvars"

      - name: Terraform Init
        working-directory: ${{ env.WORKDIR }}
        run: |
          terraform init \
            -backend-config="${{ env.BACKEND_HCL }}" \
            -backend-config="key=projects/storageaccount/dev/dev.tfstate" \
            -input=false -no-color

      - name: Terraform Apply
        working-directory: ${{ env.WORKDIR }}
        run: terraform apply -auto-approve -var-file="dev.tfvars" -no-color

      - name: Terraform Output
        working-directory: ${{ env.WORKDIR }}
        run: |
          echo "### Terraform Outputs for DEV" >> $GITHUB_STEP_SUMMARY
          terraform output -no-color | tee -a $GITHUB_STEP_SUMMARY

  deploy-test:
    name: Deploy to TEST
    runs-on: ubuntu-latest
    needs: deploy-dev
    environment: test
    env:
      WORKDIR: "OVING2/terraform"
      BACKEND_HCL: "../shared/backend.hcl"
      TF_INPUT: "false"
      TF_IN_AUTOMATION: "true"
      ENVIRONMENT: "test"
      KEYVAULT_NAME: "kv-tfstate-jfk"

    steps:
      - name: Download Terraform Artifact from Release
        uses: robinraju/release-downloader@v1.11
        with:
          repository: ${{ github.repository }}
          latest: true
          fileName: "terraform-*.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Terraform Artifact
        run: tar -xzf terraform-*.tar.gz

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
          terraform_wrapper: false

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM_* for Terraform (OIDC)
        run: |
          {
            echo "ARM_USE_OIDC=true"
            echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"
            echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          } >> "$GITHUB_ENV"

      - name: Fetch tfvars from Azure Key Vault (Base64 decode)
        run: |
          echo "Fetching Base64 tfvars for TEST..."
          mkdir -p "${{ env.WORKDIR }}"
          SECRET_B64=$(az keyvault secret show \
            --vault-name ${{ env.KEYVAULT_NAME }} \
            --name "test-tfvars-oblig2" \
            --query value -o tsv)
          echo "$SECRET_B64" | base64 -d > "${{ env.WORKDIR }}/test.tfvars"
          echo "âœ… Decoded and saved test.tfvars"

      - name: Terraform Init
        working-directory: ${{ env.WORKDIR }}
        run: |
          terraform init \
            -backend-config="${{ env.BACKEND_HCL }}" \
            -backend-config="key=projects/storageaccount/test/test.tfstate" \
            -input=false -no-color

      - name: Terraform Apply
        working-directory: ${{ env.WORKDIR }}
        run: terraform apply -auto-approve -var-file="test.tfvars" -no-color

      - name: Terraform Output
        working-directory: ${{ env.WORKDIR }}
        run: |
          echo "### Terraform Outputs for TEST" >> $GITHUB_STEP_SUMMARY
          terraform output -no-color | tee -a $GITHUB_STEP_SUMMARY

  deploy-prod:
    name: Deploy to PROD
    runs-on: ubuntu-latest
    needs: deploy-test
    environment: prod
    env:
      WORKDIR: "OVING2/terraform"
      BACKEND_HCL: "../shared/backend.hcl"
      TF_INPUT: "false"
      TF_IN_AUTOMATION: "true"
      ENVIRONMENT: "prod"
      KEYVAULT_NAME: "kv-tfstate-jfk"

    steps:
      - name: Download Terraform Artifact from Release
        uses: robinraju/release-downloader@v1.11
        with:
          repository: ${{ github.repository }}
          latest: true
          fileName: "terraform-*.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Terraform Artifact
        run: tar -xzf terraform-*.tar.gz

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
          terraform_wrapper: false

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM_* for Terraform (OIDC)
        run: |
          {
            echo "ARM_USE_OIDC=true"
            echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"
            echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          } >> "$GITHUB_ENV"

      - name: Fetch tfvars from Azure Key Vault (Base64 decode)
        run: |
          echo "Fetching Base64 tfvars for PROD..."
          mkdir -p "${{ env.WORKDIR }}"
          SECRET_B64=$(az keyvault secret show \
            --vault-name ${{ env.KEYVAULT_NAME }} \
            --name "prod-tfvars-oblig2" \
            --query value -o tsv)
          echo "$SECRET_B64" | base64 -d > "${{ env.WORKDIR }}/prod.tfvars"
          echo "âœ… Decoded and saved prod.tfvars"

      - name: Terraform Init
        working-directory: ${{ env.WORKDIR }}
        run: |
          terraform init \
            -backend-config="${{ env.BACKEND_HCL }}" \
            -backend-config="key=projects/storageaccount/prod/prod.tfstate" \
            -input=false -no-color

      - name: Terraform Apply
        working-directory: ${{ env.WORKDIR }}
        run: terraform apply -auto-approve -var-file="prod.tfvars" -no-color

      - name: Terraform Output
        working-directory: ${{ env.WORKDIR }}
        run: |
          echo "### Terraform Outputs for PROD" >> $GITHUB_STEP_SUMMARY
          terraform output -no-color | tee -a $GITHUB_STEP_SUMMARY

      - name: Deployment Summary
        run: |
          echo "## ðŸŽ‰ Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… DEV" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… TEST" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… PROD" >> $GITHUB_STEP_SUMMARY
          echo "**Same Terraform code deployed to all environments!**" >> $GITHUB_STEP_SUMMARY
