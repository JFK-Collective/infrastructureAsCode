name: Terraform CI

on:
  pull_request:
    branches:
      - main
    paths:
      - "OVING2/**"

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      WORKDIR: "OVING2/terraform"
      BACKEND_HCL: "OVING2/shared/backend.hcl"
      TF_INPUT: "false"
      TF_IN_AUTOMATION: "true"
      KEYVAULT_NAME: "kv-tfstate-jfk"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
          terraform_wrapper: false

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM_* for Terraform (OIDC)
        run: |
          {
            echo "ARM_USE_OIDC=true"
            echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"
            echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          } >> "$GITHUB_ENV"

      - name: Terraform Format Check
        working-directory: ${{ env.WORKDIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Init
        working-directory: ${{ env.WORKDIR }}
        run: |
          terraform init \
            -backend-config="${{ github.workspace }}/${{ env.BACKEND_HCL }}" \
            -backend-config="key=projects/storageaccount/dev/dev.tfstate" \
            -input=false \
            -no-color

      - name: Terraform Validate
        working-directory: ${{ env.WORKDIR }}
        run: terraform validate -no-color

  plan-all-environments:
    name: Terraform Plan - ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        environment: [dev, test, prod]

    env:
      WORKDIR: "OVING2/terraform"
      BACKEND_HCL: "OVING2/shared/backend.hcl"
      TF_INPUT: "false"
      TF_IN_AUTOMATION: "true"
      KEYVAULT_NAME: "kv-tfstate-jfk"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
          terraform_wrapper: false

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM_* for Terraform (OIDC)
        run: |
          {
            echo "ARM_USE_OIDC=true"
            echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"
            echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          } >> "$GITHUB_ENV"

      - name: Fetch tfvars from Azure Key Vault
        run: |
          echo "Fetching tfvars for ${{ matrix.environment }}..."
          mkdir -p ${{ env.WORKDIR }}
          SECRET_VALUE=$(az keyvault secret show \
            --vault-name ${{ env.KEYVAULT_NAME }} \
            --name "${{ matrix.environment }}-tfvars-oblig2" \
            --query value -o tsv)
          echo "$SECRET_VALUE" > "${{ env.WORKDIR }}/${{ matrix.environment }}.tfvars"
          echo "‚úÖ Saved ${{ matrix.environment }}.tfvars"

      - name: Terraform Init
        working-directory: ${{ env.WORKDIR }}
        run: |
          terraform init \
            -backend-config="${{ github.workspace }}/${{ env.BACKEND_HCL }}" \
            -backend-config="key=projects/storageaccount/${{ matrix.environment }}/${{ matrix.environment }}.tfstate" \
            -input=false \
            -no-color

      - name: Terraform Plan
        working-directory: ${{ env.WORKDIR }}
        id: plan
        run: |
          set +e
          terraform plan -no-color \
            -var-file="${{ matrix.environment }}.tfvars" \
            -out="${{ matrix.environment }}.tfplan" 2>&1 | tee plan-output.txt
          PLAN_EXIT_CODE=${PIPESTATUS[0]}
          set -e

          {
            echo "PLAN_EXIT_CODE=${PLAN_EXIT_CODE}"
            echo 'PLAN_OUTPUT<<EOF'
            cat plan-output.txt
            echo 'EOF'
          } >> "$GITHUB_ENV"
          exit ${PLAN_EXIT_CODE}
        continue-on-error: true

      - name: Comment PR with Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const planOutput = process.env.PLAN_OUTPUT || 'No plan output available';
            const exitCode = process.env.PLAN_EXIT_CODE || 'unknown';
            const status = (exitCode === '0' || exitCode === '2') ? '‚úÖ Success' : '‚ùå Failed';
            const output = `#### Terraform Plan for \`${{ matrix.environment }}\` üìã ${status}

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${planOutput}
            \`\`\`

            </details>

            **Exit Code:** ${exitCode}

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
